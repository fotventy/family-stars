import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏...");

    // –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ seed.ts)
    const baseTasks = [
      { title: '–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É', description: '10 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π –∑–∞—Ä—è–¥–∫–∏ üí™', points: 10, emoji: 'üí™' },
      { title: '–£–±—Ä–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É', description: '–ù–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ üßπ', points: 15, emoji: 'üßπ' },
      { title: '–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É', description: '–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞ üçΩÔ∏è', points: 12, emoji: 'üçΩÔ∏è' },
      { title: '–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üìö', points: 20, emoji: 'üìö' },
      { title: '–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã', description: '–£—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º –ø–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã ü¶∑', points: 5, emoji: 'ü¶∑' },
      { title: '–ó–∞–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–æ–≤–∞—Ç—å', description: '–ó–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –∫—Ä–æ–≤–∞—Ç—å —Å —É—Ç—Ä–∞ üõèÔ∏è', points: 8, emoji: 'üõèÔ∏è' },
      { title: '–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä', description: '–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä –∏–∑ –¥–æ–º–∞ üóëÔ∏è', points: 10, emoji: 'üóëÔ∏è' },
      { title: '–ü–æ–º–æ—á—å –º–∞–º–µ —Å –≥–æ—Ç–æ–≤–∫–æ–π', description: '–ü–æ–º–æ—á—å –º–∞–º–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–µ–¥ üë©‚Äçüç≥', points: 15, emoji: 'üë©‚Äçüç≥' },
      { title: '–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã', description: '–ü–æ–ª–∏—Ç—å –≤—Å–µ —Ü–≤–µ—Ç—ã –≤ –¥–æ–º–µ üå±', points: 8, emoji: 'üå±' },
      { title: '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É', description: '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç üìñ', points: 18, emoji: 'üìñ' }
    ];

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ seed.ts)
    const baseGifts = [
      { title: '–ß–∞—Å –∏–≥—Ä—ã –≤ Fortnite', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å –∏–≥—Ä—ã –≤ –ª—é–±–∏–º—É—é –∏–≥—Ä—É üéÆ', cost: 25, emoji: 'üéÆ' },
      { title: '–ß–∞—Å –∏–≥—Ä—ã –≤ Minecraft', description: '–°—Ç—Ä–æ–π –∏ –∏—Å—Å–ª–µ–¥—É–π —Ü–µ–ª—ã–π —á–∞—Å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚õèÔ∏è', cost: 25, emoji: 'üéÆ' },
      { title: '–ß–∞—Å –Ω–∞ YouTube', description: '–°–º–æ—Ç—Ä–∏ –ª—é–±–∏–º—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤ —Ü–µ–ª—ã–π —á–∞—Å üì∫', cost: 20, emoji: 'üì∫' },
      { title: '–ß—É–ø–∞-—á—É–ø—Å', description: '–í–∫—É—Å–Ω–∞—è –ª–µ–¥–µ–Ω—Ü–æ–≤–∞—è –∫–æ–Ω—Ñ–µ—Ç–∞ üç≠', cost: 10, emoji: 'üç≠' },
      { title: '–ö–æ–∫–∞-–∫–æ–ª–∞', description: '–ë–∞–Ω–æ—á–∫–∞ –ª—é–±–∏–º–æ–π –≥–∞–∑–∏—Ä–æ–≤–∫–∏ ü•§', cost: 15, emoji: 'ü•§' },
      { title: '–ü–∏—Ü—Ü–∞ –Ω–∞ –≤—ã–±–æ—Ä', description: '–ó–∞–∫–∞–∂–µ–º –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É üçï', cost: 80, emoji: 'üçï' },
      { title: '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ', description: '–ë–∏–ª–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ üé¨', cost: 100, emoji: 'üé¨' },
      { title: '–ù–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞', description: '–ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä—ã –≤ App Store –∏–ª–∏ Google Play üì±', cost: 60, emoji: 'üì±' },
      { title: '–õ–µ–≥–æ –Ω–∞–±–æ—Ä', description: '–ù–æ–≤—ã–π –Ω–∞–±–æ—Ä –õ–µ–≥–æ –Ω–∞ –≤—ã–±–æ—Ä üß±', cost: 150, emoji: 'üß±' },
      { title: '–ü–æ–∑–¥–Ω–∏–π –æ—Ç–±–æ–π', description: '–ú–æ–∂–µ—à—å –ª–µ—á—å —Å–ø–∞—Ç—å –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ üò¥', cost: 30, emoji: 'üò¥' },
      { title: '–í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞ –Ω–∞ –≤–µ—á–µ—Ä', description: '–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Ñ–∏–ª—å–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏ üé•', cost: 20, emoji: 'üé•' },
      { title: '–ú–∞–∫–¥–æ–Ω–∞–ª–¥—Å', description: '–ü–æ—Ö–æ–¥ –≤ –ú–∞–∫–¥–æ–Ω–∞–ª–¥—Å —Å –ª—é–±–∏–º—ã–º –º–µ–Ω—é üçü', cost: 70, emoji: 'üçü' },
      { title: '–ù–æ–≤—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏', description: '–ö—Ä—É—Ç—ã–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ üéß', cost: 200, emoji: 'üéß' },
      { title: '–ò–≥—Ä–æ–≤–∞—è –º—ã—à–∫–∞', description: '–ö—Ä—É—Ç–∞—è –≥–µ–π–º–µ—Ä—Å–∫–∞—è –º—ã—à–∫–∞ üñ±Ô∏è', cost: 120, emoji: 'üñ±Ô∏è' },
      { title: '–ü–æ—Ö–æ–¥ –≤ –∞–∫–≤–∞–ø–∞—Ä–∫', description: '–¶–µ–ª—ã–π –¥–µ–Ω—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –≤ –∞–∫–≤–∞–ø–∞—Ä–∫–µ üèä‚Äç‚ôÇÔ∏è', cost: 250, emoji: 'üèä‚Äç‚ôÇÔ∏è' }
    ];

    const createdTasks = [];
    const createdGifts = [];
    const existingTasks = [];
    const existingGifts = [];

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    for (const taskData of baseTasks) {
      try {
        const existingTask = await prisma.task.findFirst({
          where: { title: taskData.title }
        });

        if (existingTask) {
          existingTasks.push(taskData.title);
          continue;
        }

        const newTask = await prisma.task.create({
          data: {
            title: taskData.title,
            description: taskData.description,
            points: taskData.points,
          }
        });

        createdTasks.push({
          title: newTask.title,
          points: newTask.points,
          emoji: taskData.emoji
        });

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ${taskData.title}:`, error);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
    for (const giftData of baseGifts) {
      try {
        const existingGift = await prisma.gift.findFirst({
          where: { title: giftData.title }
        });

        if (existingGift) {
          existingGifts.push(giftData.title);
          continue;
        }

        const newGift = await prisma.gift.create({
          data: {
            title: giftData.title,
            description: giftData.description,
            points: giftData.cost,
          }
        });

        createdGifts.push({
          title: newGift.title,
          cost: newGift.points,
          emoji: giftData.emoji
        });

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ ${giftData.title}:`, error);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const totalTasks = await prisma.task.count();
    const totalGifts = await prisma.gift.count();

    console.log(`üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${createdTasks.length}`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${createdGifts.length}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}`);
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${totalGifts}`);

    return NextResponse.json({
      success: true,
      message: `–ö–æ–Ω—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –°–æ–∑–¥–∞–Ω–æ ${createdTasks.length} –∑–∞–¥–∞—á –∏ ${createdGifts.length} –ø–æ–¥–∞—Ä–∫–æ–≤`,
      statistics: {
        createdTasks: createdTasks.length,
        createdGifts: createdGifts.length,
        existingTasks: existingTasks.length,
        existingGifts: existingGifts.length,
        totalTasks,
        totalGifts
      },
      createdTasks,
      createdGifts,
      existingTasks,
      existingGifts
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false,
        error: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        details: error instanceof Error ? error.message : String(error)
      }, 
      { status: 500 }
    );

  } finally {
    await prisma.$disconnect();
  }
} 