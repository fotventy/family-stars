import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏...");

    // –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    const baseTasks = [
      { title: "–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", description: "–ù–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫", points: 15, emoji: "‚ú®" },
      { title: "–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É", description: "10 –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", points: 10, emoji: "üí™" },
      { title: "–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É", description: "–ü–æ—Å–ª–µ –æ–±–µ–¥–∞", points: 12, emoji: "üçΩÔ∏è" },
      { title: "–í—ã—É—á–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", description: "–ù–∞–∏–∑—É—Å—Ç—å", points: 20, emoji: "üìñ" },
      { title: "–ü–æ–º–æ—á—å —Å –≥–æ—Ç–æ–≤–∫–æ–π", description: "–ë—ã—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º", points: 15, emoji: "üë®‚Äçüç≥" },
      { title: "–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", description: "–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–æ–º–∞", points: 8, emoji: "üå±" },
      { title: "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", description: "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", points: 25, emoji: "üìö" },
      { title: "–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞", description: "–í–æ–≤—Ä–µ–º—è", points: 10, emoji: "üêï" },
      { title: "–£–±—Ä–∞—Ç—å –∏–≥—Ä—É—à–∫–∏", description: "–ù–∞ —Å–≤–æ–∏ –º–µ—Å—Ç–∞", points: 10, emoji: "üß∏" },
      { title: "–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã", description: "–£—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º", points: 5, emoji: "ü¶∑" },
      { title: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–æ–≤–∞—Ç—å", description: "–ê–∫–∫—É—Ä–∞—Ç–Ω–æ", points: 8, emoji: "üõèÔ∏è" },
      { title: "–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä", description: "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", points: 12, emoji: "üóëÔ∏è" },
    ];

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    const baseGifts = [
      { title: "–ß–∞—Å –∏–≥—Ä—ã", description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å –∏–≥—Ä", cost: 25, emoji: "üéÆ" },
      { title: "–°–ª–∞–¥–æ—Å—Ç—å", description: "–õ—é–±–∏–º–∞—è –∫–æ–Ω—Ñ–µ—Ç–∞", cost: 10, emoji: "üç¨" },
      { title: "–ü–æ–∑–¥–Ω–∏–π –æ—Ç–±–æ–π", description: "–ù–∞ 30 –º–∏–Ω—É—Ç –ø–æ–∑–∂–µ", cost: 30, emoji: "üò¥" },
      { title: "–í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞", description: "–°–µ–º–µ–π–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", cost: 20, emoji: "üé¨" },
      { title: "–ü–∏—Ü—Ü–∞ –Ω–∞ –≤—ã–±–æ—Ä", description: "–ó–∞–∫–∞–∑–∞—Ç—å –ª—é–±–∏–º—É—é", cost: 50, emoji: "üçï" },
      { title: "–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ", description: "–° –¥—Ä—É–∑—å—è–º–∏", cost: 100, emoji: "üé≠" },
      { title: "–ù–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞", description: "–î–æ 1000 —Ä—É–±–ª–µ–π", cost: 150, emoji: "üéÅ" },
      { title: "–î–µ–Ω—å –±–µ–∑ —É–±–æ—Ä–∫–∏", description: "–í—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –¥–µ–ª", cost: 40, emoji: "üèñÔ∏è" },
      { title: "–ü–æ—Ö–æ–¥ –≤ –ø–∞—Ä–∫", description: "–°–µ–º–µ–π–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞", cost: 35, emoji: "üå≥" },
      { title: "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", description: "–õ—é–±–æ–µ –Ω–∞ –≤—ã–±–æ—Ä", cost: 15, emoji: "üç¶" },
      { title: "–ö–Ω–∏–≥–∞", description: "–ù–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è", cost: 80, emoji: "üìö" },
      { title: "–ü–æ—Ö–æ–¥ –≤ –∫–∞—Ñ–µ", description: "–° —Å–µ–º—å–µ–π", cost: 120, emoji: "‚òï" },
    ];

    const createdTasks = [];
    const createdGifts = [];
    const existingTasks = [];
    const existingGifts = [];

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    for (const taskData of baseTasks) {
      try {
        const existingTask = await prisma.task.findFirst({
          where: { title: taskData.title }
        });

        if (existingTask) {
          existingTasks.push(taskData.title);
          continue;
        }

        const newTask = await prisma.task.create({
          data: {
            title: taskData.title,
            description: taskData.description,
            points: taskData.points,
          }
        });

        createdTasks.push({
          title: newTask.title,
          points: newTask.points,
          emoji: taskData.emoji
        });

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ${taskData.title}:`, error);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
    for (const giftData of baseGifts) {
      try {
        const existingGift = await prisma.gift.findFirst({
          where: { title: giftData.title }
        });

        if (existingGift) {
          existingGifts.push(giftData.title);
          continue;
        }

        const newGift = await prisma.gift.create({
          data: {
            title: giftData.title,
            description: giftData.description,
            points: giftData.cost,
          }
        });

        createdGifts.push({
          title: newGift.title,
          cost: newGift.points,
          emoji: giftData.emoji
        });

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ ${giftData.title}:`, error);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const totalTasks = await prisma.task.count();
    const totalGifts = await prisma.gift.count();

    console.log(`üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${createdTasks.length}`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${createdGifts.length}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}`);
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${totalGifts}`);

    return NextResponse.json({
      success: true,
      message: `–ö–æ–Ω—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –°–æ–∑–¥–∞–Ω–æ ${createdTasks.length} –∑–∞–¥–∞—á –∏ ${createdGifts.length} –ø–æ–¥–∞—Ä–∫–æ–≤`,
      statistics: {
        createdTasks: createdTasks.length,
        createdGifts: createdGifts.length,
        existingTasks: existingTasks.length,
        existingGifts: existingGifts.length,
        totalTasks,
        totalGifts
      },
      createdTasks,
      createdGifts,
      existingTasks,
      existingGifts
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false,
        error: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        details: error instanceof Error ? error.message : String(error)
      }, 
      { status: 500 }
    );

  } finally {
    await prisma.$disconnect();
  }
} 