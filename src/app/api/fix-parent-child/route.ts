import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ parent-child...");

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è (–ü–∞–ø–∞ –∏–ª–∏ –ú–∞–º–∞)
    const parent = await prisma.user.findFirst({
      where: { role: "PARENT" }
    });

    if (!parent) {
      return NextResponse.json({
        success: false,
        error: "–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
      }, { status: 404 });
    }

    console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å: ${parent.name} (${parent.id})`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∏–º parentId
    const children = await prisma.user.findMany({
      where: { role: "CHILD" }
    });

    console.log(`üë∂ –ù–∞–π–¥–µ–Ω–æ –¥–µ—Ç–µ–π: ${children.length}`);

    for (const child of children) {
      await prisma.user.update({
        where: { id: child.id },
        data: { parentId: parent.id }
      });
      console.log(`‚úÖ ${child.name} —Ç–µ–ø–µ—Ä—å —Ä–µ–±–µ–Ω–æ–∫ ${parent.name}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedChildren = await prisma.user.findMany({
      where: { role: "CHILD" },
      include: { parent: true }
    });

    console.log("‚úÖ –°–≤—è–∑–∏ parent-child —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");

    return NextResponse.json({
      success: true,
      message: "–°–≤—è–∑–∏ parent-child —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!",
      parent: {
        id: parent.id,
        name: parent.name
      },
      children: updatedChildren.map(child => ({
        id: child.id,
        name: child.name,
        parentId: child.parentId,
        parentName: child.parent?.name
      }))
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–µ–π:", error);
    return NextResponse.json({
      success: false,
      error: "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–µ–π parent-child",
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });

  } finally {
    await prisma.$disconnect();
  }
} 