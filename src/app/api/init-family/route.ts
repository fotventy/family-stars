import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { hash } from "bcryptjs";

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—é —Å–µ–º—å—é...");

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–º–µ–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const familyUsers = [
      // –†–æ–¥–∏—Ç–µ–ª–∏
      { name: "–ü–∞–ø–∞", password: "papa2024", role: "PARENT" },
      { name: "–ú–∞–º–∞", password: "mama2024", role: "PARENT" },
      
      // –î–µ—Ç–∏
      { name: "–ù–∞–∑–∞—Ä", password: "nazar2024", role: "CHILD" },
      { name: "–í–ª–∞–¥", password: "vlad2024", role: "CHILD" },
      { name: "–ù–∏–∫–∏—Ç–∞", password: "nikita2024", role: "CHILD" },
    ];

    const createdUsers = [];
    const existingUsers = [];

    for (const userData of familyUsers) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await prisma.user.findUnique({
          where: { name: userData.name }
        });

        if (existingUser) {
          console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          existingUsers.push({
            name: userData.name,
            role: userData.role,
            status: "already_exists"
          });
          continue;
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await hash(userData.password, 10);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = await prisma.user.create({
          data: {
            name: userData.name,
            password: hashedPassword,
            role: userData.role as "PARENT" | "CHILD",
            points: userData.role === "CHILD" ? 10 : 0, // –î–∞–µ–º –¥–µ—Ç—è–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–≤—ë–∑–¥—ã
          }
        });

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUser.name} (${newUser.role})`);
        createdUsers.push({
          name: newUser.name,
          password: userData.password,
          role: newUser.role,
          points: newUser.points,
          status: "created"
        });

      } catch (userError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.name}:`, userError);
        existingUsers.push({
          name: userData.name,
          role: userData.role,
          status: "error",
          error: userError instanceof Error ? userError.message : String(userError)
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsers = await prisma.user.count();

    console.log(`üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–º—å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: ${createdUsers.length}`);
    console.log(`üìä –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: ${existingUsers.length}`);
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);

    return NextResponse.json({
      success: true,
      message: `–°–µ–º—å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –°–æ–∑–¥–∞–Ω–æ ${createdUsers.length} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      statistics: {
        created: createdUsers.length,
        existing: existingUsers.length,
        total: totalUsers
      },
      createdUsers,
      existingUsers
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ–º—å–∏:", error);
    return NextResponse.json(
      { 
        success: false,
        error: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ–º—å–∏",
        details: error instanceof Error ? error.message : String(error)
      }, 
      { status: 500 }
    );

  } finally {
    await prisma.$disconnect();
  }
} 