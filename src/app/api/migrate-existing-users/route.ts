import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–º–µ–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–º—å–∏
    const existingFamilies = await prisma.family.findMany();
    if (existingFamilies.length > 0) {
      return NextResponse.json({
        success: false,
        message: "–°–µ–º—å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
        existingFamilies: existingFamilies.length
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await prisma.user.findMany({
      where: {
        familyId: null // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Å–µ–º—å–∏
      }
    });

    if (allUsers.length === 0) {
      return NextResponse.json({
        success: true,
        message: "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏",
        migrated: 0
      });
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${allUsers.length}`);

    // –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π PARENT –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–µ–º—å—é "–ú–æ—è —Å–µ–º—å—è")
    const mainParent = allUsers.find(u => u.role === 'PARENT');
    
    let familyName = "–ú–æ—è —Å–µ–º—å—è";
    let adminUser = mainParent;

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞—ë–º —Å–µ–º—å—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!mainParent) {
      console.log("‚ö†Ô∏è –†–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –æ–±—â—É—é —Å–µ–º—å—é");
      // –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞
      adminUser = allUsers[0];
      familyName = `–°–µ–º—å—è ${adminUser.name}`;
    } else {
      familyName = `–°–µ–º—å—è ${mainParent.name}`;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–µ–º—å–∏
    const generateInviteCode = () => {
      return Math.random().toString(36).substring(2, 8).toUpperCase();
    };

    let inviteCode = generateInviteCode();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    while (await prisma.family.findUnique({ where: { inviteCode } })) {
      inviteCode = generateInviteCode();
    }

    console.log(`üè† –°–æ–∑–¥–∞—ë–º —Å–µ–º—å—é: ${familyName} —Å –∫–æ–¥–æ–º ${inviteCode}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ adminUser –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    if (!adminUser) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ–º—å–∏");
    }

    // –°–æ–∑–¥–∞—ë–º —Å–µ–º—å—é
    const family = await prisma.family.create({
      data: {
        name: familyName,
        inviteCode,
        adminId: adminUser.id
      }
    });

    console.log(`‚úÖ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${family.id}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è—è –∏—Ö –≤ —Å–µ–º—å—é
    const updatePromises = allUsers.map(user => 
      prisma.user.update({
        where: { id: user.id },
        data: { 
          familyId: family.id,
          // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω —Å–µ–º—å–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
          ...(user.id === adminUser.id && { role: 'FAMILY_ADMIN' })
        }
      })
    );

    await Promise.all(updatePromises);

    console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—Å–µ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ–º—å—é`);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const updatedFamily = await prisma.family.findUnique({
      where: { id: family.id },
      include: {
        members: {
          select: {
            id: true,
            name: true,
            role: true,
            points: true
          }
        },
        admin: {
          select: {
            id: true,
            name: true,
            role: true
          }
        }
      }
    });

    return NextResponse.json({
      success: true,
      message: "–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–º–µ–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
      family: updatedFamily,
      migratedUsers: allUsers.length,
      details: {
        familyName,
        inviteCode,
        adminUser: {
          id: adminUser!.id,
          name: adminUser!.name,
          role: adminUser!.role
        },
        members: updatedFamily?.members || []
      }
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    return NextResponse.json({
      success: false,
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });

  } finally {
    await prisma.$disconnect();
  }
} 