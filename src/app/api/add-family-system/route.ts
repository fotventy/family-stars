import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET() {
  try {
    console.log("üîß –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º–µ–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É User
    try {
      await prisma.$executeRaw`
        ALTER TABLE "User" 
        ADD COLUMN IF NOT EXISTS "email" TEXT,
        ADD COLUMN IF NOT EXISTS "familyId" TEXT,
        ADD COLUMN IF NOT EXISTS "tempPassword" TEXT,
        ADD COLUMN IF NOT EXISTS "mustChangePassword" BOOLEAN DEFAULT false,
        ADD COLUMN IF NOT EXISTS "isEmailVerified" BOOLEAN DEFAULT false;
      `;
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É User");
    } catch (error) {
      console.log("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:", error);
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è email
    try {
      await prisma.$executeRaw`CREATE UNIQUE INDEX IF NOT EXISTS "User_email_key" ON "User"("email");`;
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è email");
    } catch (error) {
      console.log("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", error);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Family
    try {
      await prisma.$executeRaw`
        CREATE TABLE IF NOT EXISTS "Family" (
          "id" TEXT NOT NULL,
          "name" TEXT NOT NULL,
          "inviteCode" TEXT NOT NULL,
          "adminId" TEXT NOT NULL,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT "Family_pkey" PRIMARY KEY ("id")
        );
      `;
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ Family");
    } catch (error) {
      console.log("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ Family —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", error);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è Family
    try {
      await prisma.$executeRaw`CREATE UNIQUE INDEX IF NOT EXISTS "Family_inviteCode_key" ON "Family"("inviteCode");`;
      await prisma.$executeRaw`CREATE UNIQUE INDEX IF NOT EXISTS "Family_adminId_key" ON "Family"("adminId");`;
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Family");
    } catch (error) {
      console.log("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:", error);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    try {
      await prisma.$executeRaw`
        ALTER TABLE "User" 
        ADD CONSTRAINT "User_familyId_fkey" 
        FOREIGN KEY ("familyId") REFERENCES "Family"("id") ON DELETE SET NULL ON UPDATE CASCADE;
      `;
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á User -> Family");
    } catch (error) {
      console.log("‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", error);
    }

    try {
      await prisma.$executeRaw`
        ALTER TABLE "Family" 
        ADD CONSTRAINT "Family_adminId_fkey" 
        FOREIGN KEY ("adminId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      `;
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á Family -> User");
    } catch (error) {
      console.log("‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", error);
    }

    console.log("‚úÖ –°–µ–º–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const userCount = await prisma.user.count();
    const familyCount = await prisma.family.count();

    return NextResponse.json({
      success: true,
      message: "–°–µ–º–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
      updates: {
        "User table": "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: email, familyId, tempPassword, mustChangePassword, isEmailVerified",
        "Family table": "‚úÖ –°–æ–∑–¥–∞–Ω–∞",
        "Indexes": "‚úÖ –°–æ–∑–¥–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã",
        "Foreign keys": "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏"
      },
      counts: {
        users: userCount,
        families: familyCount
      },
      nextStep: "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ–º—å–∏ —á–µ—Ä–µ–∑ /api/register-family"
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:", error);
    return NextResponse.json({
      success: false,
      error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });

  } finally {
    await prisma.$disconnect();
  }
} 