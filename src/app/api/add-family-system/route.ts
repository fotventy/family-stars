import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üèóÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º–µ–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Family
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "Family" (
        "id" TEXT NOT NULL,
        "name" TEXT NOT NULL,
        "inviteCode" TEXT NOT NULL,
        "adminId" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT "Family_pkey" PRIMARY KEY ("id")
      );
    `;

    await prisma.$executeRaw`
      CREATE UNIQUE INDEX IF NOT EXISTS "Family_inviteCode_key" ON "Family"("inviteCode");
    `;

    await prisma.$executeRaw`
      CREATE UNIQUE INDEX IF NOT EXISTS "Family_adminId_key" ON "Family"("adminId");
    `;

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ User (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    await prisma.$executeRaw`
      ALTER TABLE "User" 
      ADD COLUMN IF NOT EXISTS "email" TEXT,
      ADD COLUMN IF NOT EXISTS "familyId" TEXT,
      ADD COLUMN IF NOT EXISTS "tempPassword" TEXT,
      ADD COLUMN IF NOT EXISTS "mustChangePassword" BOOLEAN NOT NULL DEFAULT false,
      ADD COLUMN IF NOT EXISTS "isEmailVerified" BOOLEAN NOT NULL DEFAULT false;
    `;

    // 3. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è email
    await prisma.$executeRaw`
      CREATE UNIQUE INDEX IF NOT EXISTS "User_email_key" ON "User"("email");
    `;

    // 4. –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    await prisma.$executeRaw`
      ALTER TABLE "Family" 
      ADD CONSTRAINT IF NOT EXISTS "Family_adminId_fkey" 
      FOREIGN KEY ("adminId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
    `;

    await prisma.$executeRaw`
      ALTER TABLE "User" 
      ADD CONSTRAINT IF NOT EXISTS "User_familyId_fkey" 
      FOREIGN KEY ("familyId") REFERENCES "Family"("id") ON DELETE SET NULL ON UPDATE CASCADE;
    `;

    console.log("‚úÖ –°–µ–º–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");

    return NextResponse.json({
      success: true,
      message: "–°–µ–º–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:", error);
    return NextResponse.json(
      { 
        error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
        details: error instanceof Error ? error.message : String(error)
      }, 
      { status: 500 }
    );

  } finally {
    await prisma.$disconnect();
  }
} 