import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const familyCode = searchParams.get('familyCode');

    console.log("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞...");
    
    if (familyCode) {
      // –ò—â–µ–º —Å–µ–º—å—é –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      console.log(`üîç –ü–æ–∏—Å–∫ —Å–µ–º—å–∏ –ø–æ –∫–æ–¥—É: ${familyCode}`);
      
      const family = await prisma.family.findUnique({
        where: { inviteCode: familyCode },
        include: {
          members: {
            select: {
              id: true,
              name: true,
              role: true,
              points: true,
              gender: true
            },
            orderBy: [
              { role: 'desc' }, // PARENT/FAMILY_ADMIN —Å–Ω–∞—á–∞–ª–∞
              { name: 'asc' }
            ]
          }
        }
      });

      if (!family) {
        console.log("‚ùå –°–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return NextResponse.json(
          { error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–µ–º—å–∏" }, 
          { status: 404 }
        );
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–º—å—è: ${family.name}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${family.members.length}`);
      
      return NextResponse.json({
        familyName: family.name,
        users: family.members
      });
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await prisma.user.findMany({
        select: {
          id: true,
          name: true,
          role: true,
          points: true,
          gender: true
        },
        orderBy: [
          { role: 'desc' }, // PARENT —Å–Ω–∞—á–∞–ª–∞
          { name: 'asc' }
        ]
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      
      return NextResponse.json(users);
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    return NextResponse.json(
      { 
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        details: error instanceof Error ? error.message : String(error)
      }, 
      { status: 500 }
    );

  } finally {
    await prisma.$disconnect();
  }
} 