import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET() {
  try {
    console.log("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...");
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã
    await prisma.$queryRaw`SELECT 1`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–∞—à–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableChecks = await Promise.allSettled([
      prisma.user.findFirst(),
      prisma.task.findFirst(), 
      prisma.gift.findFirst(),
      prisma.userTask.findFirst(),
      prisma.userGift.findFirst()
    ]);
    
    const tablesExist = {
      User: tableChecks[0].status === 'fulfilled',
      Task: tableChecks[1].status === 'fulfilled',
      Gift: tableChecks[2].status === 'fulfilled',
      UserTask: tableChecks[3].status === 'fulfilled',
      UserGift: tableChecks[4].status === 'fulfilled'
    };
    
    const allTablesExist = Object.values(tablesExist).every(exists => exists);
    
    return NextResponse.json({
      success: true,
      message: allTablesExist ? "–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã" : "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
      migration: {
        required: !allTablesExist,
        tablesExist,
        recommendation: allTablesExist ? 
          "–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è" : 
          "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Vercel Dashboard"
      },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π:", error);
    
    const errorMessage = error instanceof Error ? error.message : String(error);
    const isSchemaError = errorMessage.includes('relation') || 
                         errorMessage.includes('table') || 
                         errorMessage.includes('column');
    
    return NextResponse.json({
      success: false,
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
      details: errorMessage,
      migration: {
        required: true,
        reason: isSchemaError ? "–¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã" : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        recommendation: isSchemaError ? 
          "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: prisma migrate deploy" : 
          "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
      },
      timestamp: new Date().toISOString()
    }, { status: 500 });
    
  } finally {
    await prisma.$disconnect();
  }
} 