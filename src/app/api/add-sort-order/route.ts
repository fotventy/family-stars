import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ sortOrder –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º...");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ sortOrder –∫ —Ç–∞–±–ª–∏—Ü–µ Task –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try {
      await prisma.$executeRaw`
        ALTER TABLE "Task" 
        ADD COLUMN IF NOT EXISTS "sortOrder" INTEGER DEFAULT 0;
      `;
      console.log("‚úÖ –ü–æ–ª–µ sortOrder –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ Task");
    } catch (error) {
      console.log("‚ÑπÔ∏è –ü–æ–ª–µ sortOrder —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ Task –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ sortOrder –∫ —Ç–∞–±–ª–∏—Ü–µ Gift –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try {
      await prisma.$executeRaw`
        ALTER TABLE "Gift" 
        ADD COLUMN IF NOT EXISTS "sortOrder" INTEGER DEFAULT 0;
      `;
      console.log("‚úÖ –ü–æ–ª–µ sortOrder –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ Gift");
    } catch (error) {
      console.log("‚ÑπÔ∏è –ü–æ–ª–µ sortOrder —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ Gift –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sortOrder –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
    const tasks = await prisma.task.findMany({
      orderBy: { createdAt: 'asc' }
    });

    for (let i = 0; i < tasks.length; i++) {
      await prisma.task.update({
        where: { id: tasks[i].id },
        data: { sortOrder: i }
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sortOrder –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    const gifts = await prisma.gift.findMany({
      orderBy: { points: 'asc' } // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ —Ü–µ–Ω–µ
    });

    for (let i = 0; i < gifts.length; i++) {
      await prisma.gift.update({
        where: { id: gifts[i].id },
        data: { sortOrder: i }
      });
    }

    console.log("‚úÖ –ü–æ–ª—è sortOrder –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!");

    return NextResponse.json({
      success: true,
      message: "–ü–æ–ª—è sortOrder —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
      updated: {
        tasks: tasks.length,
        gifts: gifts.length
      }
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è sortOrder:", error);
    return NextResponse.json({
      success: false,
      error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è sortOrder",
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });

  } finally {
    await prisma.$disconnect();
  }
} 