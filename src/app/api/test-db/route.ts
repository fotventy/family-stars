import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function GET() {
  try {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await prisma.user.count();
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    const taskCount = await prisma.task.count();
    const giftCount = await prisma.gift.count();
    const userTaskCount = await prisma.userTask.count();
    const userGiftCount = await prisma.userGift.count();
    
    const stats = {
      users: userCount,
      tasks: taskCount,
      gifts: giftCount,
      userTasks: userTaskCount,
      userGifts: userGiftCount
    };
    
    console.log("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", stats);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const dbUrl = process.env.DATABASE_URL;
    const hasDbUrl = !!dbUrl;
    const dbProvider = dbUrl?.startsWith('postgresql://') ? 'PostgreSQL' : 
                      dbUrl?.startsWith('postgres://') ? 'PostgreSQL' :
                      dbUrl?.startsWith('file:') ? 'SQLite' : 'Unknown';
    
    return NextResponse.json({
      success: true,
      message: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
      database: {
        connected: true,
        provider: dbProvider,
        hasConnectionString: hasDbUrl,
        connectionStringPrefix: dbUrl?.substring(0, 20) + '...' || '–Ω–µ –Ω–∞–π–¥–µ–Ω'
      },
      statistics: stats,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    
    return NextResponse.json({
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
      details: error instanceof Error ? error.message : String(error),
      database: {
        connected: false,
        hasConnectionString: !!process.env.DATABASE_URL,
        connectionStringPrefix: process.env.DATABASE_URL?.substring(0, 20) + '...' || '–Ω–µ –Ω–∞–π–¥–µ–Ω'
      },
      timestamp: new Date().toISOString()
    }, { status: 500 });
    
  } finally {
    await prisma.$disconnect();
  }
} 