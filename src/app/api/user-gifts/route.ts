import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

const prisma = new PrismaClient();

export async function GET(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json(
        { error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, 
        { status: 401 }
      );
    }

    let userGifts;
    
    if ((session as any).user.role === "PARENT") {
      // –†–æ–¥–∏—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –≤—Å–µ—Ö –¥–µ—Ç–µ–π
      userGifts = await prisma.userGift.findMany({
        where: {
          user: {
            role: 'CHILD'
          }
        },
        include: {
          gift: true,
          user: true
        },
        orderBy: {
          createdAt: 'desc'
        }
      });
    } else {
      // –î–µ—Ç–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã
      userGifts = await prisma.userGift.findMany({
      where: {
          userId: (session as any).user.id
      },
      include: {
        gift: true
        },
        orderBy: {
          createdAt: 'desc'
      }
    });
    }

    return NextResponse.json(userGifts);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–±–æ—Ä–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, 
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json(
        { error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, 
        { status: 401 }
      );
    }

    const { giftId } = await request.json();

    if (!giftId) {
      return NextResponse.json(
        { error: "ID –ø–æ–¥–∞—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, 
        { status: 400 }
      );
    }

    // –¢–æ–ª—å–∫–æ –¥–µ—Ç–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏
    if ((session as any).user.role !== "CHILD") {
      return NextResponse.json(
        { error: "–¢–æ–ª—å–∫–æ –¥–µ—Ç–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏" }, 
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const gift = await prisma.gift.findUnique({
      where: { id: giftId }
    });

    if (!gift) {
      return NextResponse.json(
        { error: "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, 
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤
    const user = await prisma.user.findUnique({
      where: { id: (session as any).user.id }
    });

    if (!user || user.points < gift.points) {
      return NextResponse.json(
        { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞" }, 
        { status: 400 }
      );
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
    const result = await prisma.$transaction(async (tx) => {
      // –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞
      const userGift = await tx.userGift.create({
      data: {
        userId: (session as any).user.id,
        giftId: giftId,
        status: 'REQUESTED'
        },
        include: {
          gift: true
        }
      });

      // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await tx.user.update({
        where: { id: (session as any).user.id },
        data: { points: { decrement: gift.points } }
      });

      return userGift;
    });

    return NextResponse.json(result, { status: 201 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–∞:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, 
      { status: 500 }
    );
  }
}

export async function PUT(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    
    console.log(`üîÑ PUT /api/user-gifts - —Å–µ—Å—Å–∏—è:`, session ? {
      id: (session as any).user.id,
      name: (session as any).user.name,
      role: (session as any).user.role
    } : '–Ω–µ—Ç —Å–µ—Å—Å–∏–∏');
    
    if (!session || (session as any).user.role !== "PARENT") {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: role = ${(session as any)?.user?.role}`);
      return NextResponse.json(
        { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" }, 
        { status: 403 }
      );
    }

    const { userGiftId, status } = await request.json();
    console.log(`üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: userGiftId=${userGiftId}, status=${status}`);

    if (!userGiftId || !status) {
      console.log(`‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: userGiftId=${userGiftId}, status=${status}`);
      return NextResponse.json(
        { error: "ID –≤—ã–±–æ—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }, 
        { status: 400 }
      );
    }

    if (!['APPROVED', 'REJECTED', 'REDEEMED'].includes(status)) {
      console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`);
      return NextResponse.json(
        { error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å" }, 
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–µ–±–µ–Ω–∫—É —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    const userGift = await prisma.userGift.findUnique({
      where: { id: userGiftId },
      include: {
        user: true,
        gift: true
      }
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π userGift:`, userGift ? {
      id: userGift.id,
      status: userGift.status,
      userId: userGift.userId,
      userParentId: userGift.user.parentId,
      userName: userGift.user.name,
      giftTitle: userGift.gift.title
    } : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (!userGift) {
      console.log(`‚ùå –í—ã–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userGiftId}`);
      return NextResponse.json(
        { error: "–í—ã–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" }, 
        { status: 404 }
      );
    }

    console.log(`üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: userGift.user.parentId (${userGift.user.parentId}) === session.user.id (${(session as any).user.id})`);
    
    if (userGift.user.parentId !== (session as any).user.id) {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–º`);
      return NextResponse.json(
        { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø–æ–¥–∞—Ä–∫–æ–º" }, 
        { status: 403 }
      );
    }

    // –ï—Å–ª–∏ –≤—ã–±–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–ª—ã
    let updatedUserGift;
    if (status === 'REJECTED' && userGift.status === 'REQUESTED') {
      updatedUserGift = await prisma.$transaction(async (tx) => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await tx.user.update({
          where: { id: userGift.userId },
          data: { points: { increment: userGift.gift.points } }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞
        return await tx.userGift.update({
          where: { id: userGiftId },
          data: { status },
          include: {
            gift: true,
            user: true
          }
        });
      });
    } else {
      updatedUserGift = await prisma.userGift.update({
        where: { id: userGiftId },
        data: { status },
        include: {
          gift: true,
          user: true
      }
    });
    }

    return NextResponse.json(updatedUserGift);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–æ—Ä–∞:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, 
      { status: 500 }
    );
  }
} 